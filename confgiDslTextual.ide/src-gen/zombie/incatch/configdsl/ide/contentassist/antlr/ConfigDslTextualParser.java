/*
 * generated by Xtext 2.27.0
 */
package zombie.incatch.configdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import zombie.incatch.configdsl.ide.contentassist.antlr.internal.InternalConfigDslTextualParser;
import zombie.incatch.configdsl.services.ConfigDslTextualGrammarAccess;

public class ConfigDslTextualParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ConfigDslTextualGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ConfigDslTextualGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_7(), "rule__Config__Group_7__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_9(), "rule__Config__Group_9__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_9_3(), "rule__Config__Group_9_3__0");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getSimpleStringFieldAccess().getGroup(), "rule__SimpleStringField__Group__0");
			builder.put(grammarAccess.getSimpleStringFieldAccess().getGroup_5(), "rule__SimpleStringField__Group_5__0");
			builder.put(grammarAccess.getDynamicListFieldAccess().getGroup(), "rule__DynamicListField__Group__0");
			builder.put(grammarAccess.getDynamicListFieldAccess().getGroup_5(), "rule__DynamicListField__Group_5__0");
			builder.put(grammarAccess.getDynamicListFieldAccess().getGroup_5_3(), "rule__DynamicListField__Group_5_3__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getDynamicListItemAccess().getGroup(), "rule__DynamicListItem__Group__0");
			builder.put(grammarAccess.getConfigAccess().getProjectAssignment_3(), "rule__Config__ProjectAssignment_3");
			builder.put(grammarAccess.getConfigAccess().getSimpleStringFieldsAssignment_6(), "rule__Config__SimpleStringFieldsAssignment_6");
			builder.put(grammarAccess.getConfigAccess().getSimpleStringFieldsAssignment_7_1(), "rule__Config__SimpleStringFieldsAssignment_7_1");
			builder.put(grammarAccess.getConfigAccess().getDynamicListFieldsAssignment_9_2(), "rule__Config__DynamicListFieldsAssignment_9_2");
			builder.put(grammarAccess.getConfigAccess().getDynamicListFieldsAssignment_9_3_1(), "rule__Config__DynamicListFieldsAssignment_9_3_1");
			builder.put(grammarAccess.getProjectAccess().getKeepClassificationAssignment_1(), "rule__Project__KeepClassificationAssignment_1");
			builder.put(grammarAccess.getProjectAccess().getNameAssignment_3(), "rule__Project__NameAssignment_3");
			builder.put(grammarAccess.getSimpleStringFieldAccess().getIsRequiredAssignment_1(), "rule__SimpleStringField__IsRequiredAssignment_1");
			builder.put(grammarAccess.getSimpleStringFieldAccess().getNameAssignment_3(), "rule__SimpleStringField__NameAssignment_3");
			builder.put(grammarAccess.getSimpleStringFieldAccess().getSizeAssignment_5_1(), "rule__SimpleStringField__SizeAssignment_5_1");
			builder.put(grammarAccess.getDynamicListFieldAccess().getIsRequiredAssignment_1(), "rule__DynamicListField__IsRequiredAssignment_1");
			builder.put(grammarAccess.getDynamicListFieldAccess().getNameAssignment_3(), "rule__DynamicListField__NameAssignment_3");
			builder.put(grammarAccess.getDynamicListFieldAccess().getDynamicListItemsAssignment_5_2(), "rule__DynamicListField__DynamicListItemsAssignment_5_2");
			builder.put(grammarAccess.getDynamicListFieldAccess().getDynamicListItemsAssignment_5_3_1(), "rule__DynamicListField__DynamicListItemsAssignment_5_3_1");
			builder.put(grammarAccess.getDynamicListItemAccess().getNameAssignment_2(), "rule__DynamicListItem__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ConfigDslTextualGrammarAccess grammarAccess;

	@Override
	protected InternalConfigDslTextualParser createParser() {
		InternalConfigDslTextualParser result = new InternalConfigDslTextualParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ConfigDslTextualGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ConfigDslTextualGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
