/*
 * generated by Xtext 2.27.0
 */
package zombie.incatch.configdsl.serializer;

import ConfigDsl.Config;
import ConfigDsl.ConfigDslPackage;
import ConfigDsl.DynamicListField;
import ConfigDsl.DynamicListItem;
import ConfigDsl.Project;
import ConfigDsl.SimpleStringField;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import zombie.incatch.configdsl.services.ConfigDslTextualGrammarAccess;

@SuppressWarnings("all")
public class ConfigDslTextualSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConfigDslTextualGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ConfigDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConfigDslPackage.CONFIG:
				sequence_Config(context, (Config) semanticObject); 
				return; 
			case ConfigDslPackage.DYNAMIC_LIST_FIELD:
				sequence_DynamicListField(context, (DynamicListField) semanticObject); 
				return; 
			case ConfigDslPackage.DYNAMIC_LIST_ITEM:
				sequence_DynamicListItem(context, (DynamicListItem) semanticObject); 
				return; 
			case ConfigDslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case ConfigDslPackage.SIMPLE_STRING_FIELD:
				sequence_SimpleStringField(context, (SimpleStringField) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Config returns Config
	 *
	 * Constraint:
	 *     (
	 *         project=Project 
	 *         simpleStringFields+=SimpleStringField 
	 *         simpleStringFields+=SimpleStringField* 
	 *         (dynamicListFields+=DynamicListField dynamicListFields+=DynamicListField*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Config(ISerializationContext context, Config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DynamicListField returns DynamicListField
	 *
	 * Constraint:
	 *     (IsRequired?='IsRequired'? Name=EString (dynamicListItems+=DynamicListItem dynamicListItems+=DynamicListItem*)?)
	 * </pre>
	 */
	protected void sequence_DynamicListField(ISerializationContext context, DynamicListField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DynamicListItem returns DynamicListItem
	 *
	 * Constraint:
	 *     Name=EString
	 * </pre>
	 */
	protected void sequence_DynamicListItem(ISerializationContext context, DynamicListItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigDslPackage.Literals.DYNAMIC_LIST_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigDslPackage.Literals.DYNAMIC_LIST_ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDynamicListItemAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (KeepClassification?='KeepClassification'? Name=EString)
	 * </pre>
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleStringField returns SimpleStringField
	 *
	 * Constraint:
	 *     (IsRequired?='IsRequired'? Name=EString Size=EInt?)
	 * </pre>
	 */
	protected void sequence_SimpleStringField(ISerializationContext context, SimpleStringField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
