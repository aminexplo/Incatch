/**
 * generated by Xtext 2.27.0
 */
package zombie.incatch.configdsl.formatting2;

import ConfigDsl.Config;
import ConfigDsl.DynamicListField;
import ConfigDsl.DynamicListItem;
import ConfigDsl.Project;
import ConfigDsl.SimpleStringField;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import zombie.incatch.configdsl.services.ConfigDslTextualGrammarAccess;

@SuppressWarnings("all")
public class ConfigDslTextualFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ConfigDslTextualGrammarAccess _configDslTextualGrammarAccess;

  protected void _format(final Config config, @Extension final IFormattableDocument document) {
    document.<Project>format(config.getProject());
    EList<SimpleStringField> _simpleStringFields = config.getSimpleStringFields();
    for (final SimpleStringField simpleStringField : _simpleStringFields) {
      document.<SimpleStringField>format(simpleStringField);
    }
    EList<DynamicListField> _dynamicListFields = config.getDynamicListFields();
    for (final DynamicListField dynamicListField : _dynamicListFields) {
      document.<DynamicListField>format(dynamicListField);
    }
  }

  protected void _format(final DynamicListField dynamicListField, @Extension final IFormattableDocument document) {
    EList<DynamicListItem> _dynamicListItems = dynamicListField.getDynamicListItems();
    for (final DynamicListItem dynamicListItem : _dynamicListItems) {
      document.<DynamicListItem>format(dynamicListItem);
    }
  }

  public void format(final Object config, final IFormattableDocument document) {
    if (config instanceof XtextResource) {
      _format((XtextResource)config, document);
      return;
    } else if (config instanceof Config) {
      _format((Config)config, document);
      return;
    } else if (config instanceof DynamicListField) {
      _format((DynamicListField)config, document);
      return;
    } else if (config instanceof EObject) {
      _format((EObject)config, document);
      return;
    } else if (config == null) {
      _format((Void)null, document);
      return;
    } else if (config != null) {
      _format(config, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(config, document).toString());
    }
  }
}
