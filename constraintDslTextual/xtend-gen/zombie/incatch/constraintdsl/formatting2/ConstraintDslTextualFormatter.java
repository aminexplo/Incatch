/**
 * generated by Xtext 2.27.0
 */
package zombie.incatch.constraintdsl.formatting2;

import ConstraintDsl.ConstraintCollection;
import ConstraintDsl.Rule;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import zombie.incatch.constraintdsl.services.ConstraintDslTextualGrammarAccess;

@SuppressWarnings("all")
public class ConstraintDslTextualFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ConstraintDslTextualGrammarAccess _constraintDslTextualGrammarAccess;

  protected void _format(final ConstraintCollection constraintCollection, @Extension final IFormattableDocument document) {
    EList<Rule> _rules = constraintCollection.getRules();
    for (final Rule rule : _rules) {
      document.<Rule>format(rule);
    }
  }

  public void format(final Object constraintCollection, final IFormattableDocument document) {
    if (constraintCollection instanceof XtextResource) {
      _format((XtextResource)constraintCollection, document);
      return;
    } else if (constraintCollection instanceof ConstraintCollection) {
      _format((ConstraintCollection)constraintCollection, document);
      return;
    } else if (constraintCollection instanceof EObject) {
      _format((EObject)constraintCollection, document);
      return;
    } else if (constraintCollection == null) {
      _format((Void)null, document);
      return;
    } else if (constraintCollection != null) {
      _format(constraintCollection, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(constraintCollection, document).toString());
    }
  }
}
